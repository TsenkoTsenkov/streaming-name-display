import {
  X,
  Copy,
  ExternalLink,
  Upload,
  Check,
  AlertCircle,
  Edit,
  Save,
  Sliders,
  ChevronRight,
  Palette,
  Type,
  Monitor,
  HelpCircle,
  Maximize,
  Play,
} from "lucide-react";
import { useEffect, useMemo, useState, useRef, useCallback } from "react";
import DisplayOnly from "./DisplayOnly";

const StreamingApp = () => {
  // Reference for the drag-drop area
  const dropAreaRef = useRef(null);

  // Parse URL parameters for display mode
  const urlParams = useMemo(
    () => new URLSearchParams(window.location.search),
    [],
  );
  const isDisplayMode = urlParams.get("display") === "true";

  // Parse streaming person data if available in URL
  const personDataParam = urlParams.get("personData");
  const settingsDataParam = urlParams.get("settingsData");

  // Get stored settings and people from localStorage if available
  const getInitialPeople = () => {
    try {
      const storedPeople = localStorage.getItem("streamingAppPeople");
      if (storedPeople) {
        return JSON.parse(storedPeople);
      }
    } catch (e) {
      console.error("Error loading stored people:", e);
    }

    return [
      {
        id: 1,
        name: "Name1",
        surname: "Surname1",
        title: "Guest Speaker",
        selected: true,
        streaming: false,
      },
      {
        id: 2,
        name: "Name2",
        surname: "Surname2",
        title: "Host",
        selected: false,
        streaming: false,
      },
      {
        id: 3,
        name: "Name3",
        surname: "Surname3",
        title: "Panelist",
        selected: false,
        streaming: false,
      },
      {
        id: 4,
        name: "Name4",
        surname: "Surname4",
        title: "Moderator",
        selected: false,
        streaming: false,
      },
    ];
  };

  const getInitialSettings = () => {
    try {
      const storedSettings = localStorage.getItem("streamingAppSettings");
      if (storedSettings) {
        return JSON.parse(storedSettings);
      }
    } catch (e) {
      console.error("Error loading stored settings:", e);
    }

    return {
      showName: true,
      showTitles: true,
      displayStyle: "gradient", // gradient, solid, transparent, minimal
      textStyle: "bold", // normal, bold, light
      borderStyle: "thin", // none, thin, glow, accent
      textShadow: true,
      boxShadow: true,
      decorativeElements: true,
      displayWidth: 400, // Default width in pixels
      displayHeight: 120, // Default height in pixels
      fontSize: 30, // Default font size in pixels
      titleFontSize: 20, // Default title font size in pixels
    };
  };

  // All state definitions grouped together at the top
  const [displayModePerson, setDisplayModePerson] = useState(null);
  const [displayModeSettings, setDisplayModeSettings] =
    useState(getInitialSettings());
  const [people, setPeople] = useState(getInitialPeople);
  const [displaySettings, setDisplaySettings] = useState(getInitialSettings);
  const [liveSettings, setLiveSettings] = useState(getInitialSettings);
  const [newPerson, setNewPerson] = useState({
    name: "",
    surname: "",
    title: "",
  });
  const [isDisplayActive, setIsDisplayActive] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadStatus, setUploadStatus] = useState(null);
  const [editingId, setEditingId] = useState(null);
  const [editForm, setEditForm] = useState({
    name: "",
    surname: "",
    title: "",
  });
  const [currentTab, setCurrentTab] = useState("people"); // people, appearance, preview
  const [previewWindow, setPreviewWindow] = useState(null);
  const [showTutorial, setShowTutorial] = useState(false);
  const [dragActive, setDragActive] = useState(false);

  // NEW: Store the currently live/streaming person
  const [livePerson, setLivePerson] = useState(null);

  // Selected person for preview
  const selectedPerson = people.find((person) => person.selected) || null;

  // Get the URL for the live display
  const getLiveDisplayUrl = () => {
    return `${window.location.origin}/display`;
  };

  // Get the URL for the preview display
  const getPreviewDisplayUrl = () => {
    return `${window.location.origin}/?preview=true`;
  };

  // ALL HOOKS MUST BE DEFINED HERE AT THE TOP LEVEL
  
  // Helper function to apply style presets
  const applyStylePreset = useCallback((presetName) => {
    let newSettings;
    
    switch(presetName) {
      case "gradient":
        newSettings = {
          ...displaySettings,
          displayStyle: "gradient",
          borderStyle: "thin",
          textStyle: "bold",
          textShadow: true,
          boxShadow: true,
          decorativeElements: true,
        };
        break;
      case "minimal":
        newSettings = {
          ...displaySettings,
          displayStyle: "solid",
          borderStyle: "none",
          textStyle: "light",
          textShadow: false,
          boxShadow: true,
          decorativeElements: false,
        };
        break;
      case "accented":
        newSettings = {
          ...displaySettings,
          displayStyle: "transparent",
          borderStyle: "accent",
          textStyle: "normal",
          textShadow: true,
          boxShadow: false,
          decorativeElements: true,
        };
        break;
      default:
        newSettings = { ...displaySettings };
        break;
    }
    
    // Update display settings
    setDisplaySettings(newSettings);
    
    // Only update live settings if selected person is currently live
    if (livePerson && selectedPerson && livePerson.id === selectedPerson.id) {
      const tempSettings = { ...newSettings };
      setLiveSettings(tempSettings);
      
      // Inline the updatePreviewWithSettings logic to avoid circular dependency
      const message = {
        type: "UPDATE_DISPLAY",
        data: {
          person: livePerson,
          settings: tempSettings,
        },
      };
      
      localStorage.setItem("streamingAppLiveData", JSON.stringify(message.data));
      localStorage.setItem("streamingAppUpdate", Date.now().toString());
      
      if (previewWindow && !previewWindow.closed) {
        previewWindow.postMessage(message, "*");
      }
    }
    
    console.log(`Applied ${presetName} preset`);
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [displaySettings, livePerson, selectedPerson, previewWindow]);

  // Save people to localStorage
  useEffect(() => {
    try {
      localStorage.setItem("streamingAppPeople", JSON.stringify(people));
    } catch (e) {
      console.error("Error saving people to localStorage:", e);
    }
  }, [people]);

  // Main function to update LIVE window (OBS and display windows)
  const updatePreviewWindow = useCallback(() => {
    // This updates ONLY what is currently LIVE (not preview)
    const message = {
      type: "UPDATE_DISPLAY",
      data: {
        person: livePerson
          ? {
              name: livePerson.name,
              surname: livePerson.surname,
              title: livePerson.title,
            }
          : null,
        settings: liveSettings,
      },
    };

    // Send to any open preview window
    if (previewWindow && !previewWindow.closed) {
      previewWindow.postMessage(message, "*");
    }

    // Store data permanently in localStorage for OBS and other browser sources
    window.localStorage.setItem(
      "streamingAppLiveData",
      JSON.stringify(message.data)
    );
    
    // Trigger a storage event for other windows by modifying a different key
    window.localStorage.setItem(
      "streamingAppUpdate",
      Date.now().toString()
    );
  }, [livePerson, liveSettings, previewWindow]);

  // Function to update PREVIEW window only
  const updatePreviewSettingsOnly = useCallback(() => {
    // Only update the preview window, not live data
    if (previewWindow && !previewWindow.closed && selectedPerson) {
      const previewMessage = {
        type: "UPDATE_PREVIEW",
        data: {
          person: selectedPerson ? {
            name: selectedPerson.name,
            surname: selectedPerson.surname,
            title: selectedPerson.title,
          } : null,
          settings: displaySettings,
        },
      };
      
      previewWindow.postMessage(previewMessage, "*");
      
      // Store preview data separately from live data
      window.localStorage.setItem(
        "streamingAppPreviewData",
        JSON.stringify(previewMessage.data)
      );
    }
  }, [selectedPerson, displaySettings, previewWindow]);

  // Helper function for updating preview with new settings (NOT the live stream)
  const updatePreviewWithSettings = useCallback((updatedSettings) => {
    if (!livePerson) return;
    
    // We're updating the LIVE settings for OBS - not to be confused with preview
    const message = {
      type: "UPDATE_DISPLAY",
      data: {
        person: livePerson,
        settings: updatedSettings,
      },
    };
    
    // Store for OBS
    localStorage.setItem("streamingAppLiveData", JSON.stringify(message.data));
    localStorage.setItem("streamingAppUpdate", Date.now().toString());
    
    // Send to preview window if open
    if (previewWindow && !previewWindow.closed) {
      previewWindow.postMessage(message, "*");
    }
  }, [livePerson, previewWindow]);

  // Save to localStorage whenever settings change - and update preview
  useEffect(() => {
    try {
      localStorage.setItem("streamingAppSettings", JSON.stringify(displaySettings));
      
      // Update preview with new settings (NOT the live stream)
      updatePreviewSettingsOnly();
    } catch (e) {
      console.error("Error saving settings to localStorage:", e);
    }
  }, [displaySettings, updatePreviewSettingsOnly]);

  // Watch for changes to livePerson or liveSettings to update OBS
  useEffect(() => {
    if (livePerson) {
      updatePreviewWindow();
    }
  }, [livePerson, liveSettings, updatePreviewWindow]);

  useEffect(() => {
    if (isDisplayMode && personDataParam) {
      try {
        setDisplayModePerson(JSON.parse(decodeURIComponent(personDataParam)));
      } catch (e) {
        console.error("Error parsing person data from URL:", e);
      }
    }

    if (isDisplayMode && settingsDataParam) {
      try {
        setDisplayModeSettings(
          JSON.parse(decodeURIComponent(settingsDataParam)),
        );
      } catch (e) {
        console.error("Error parsing settings data from URL:", e);
        setDisplayModeSettings(getInitialSettings());
      }
    }
  }, [isDisplayMode, personDataParam, settingsDataParam]);

  useEffect(() => {
    if (isDisplayMode) {
      console.log("Display mode initialized");

      // Function to load the current live data
      const loadLiveData = () => {
        try {
          const storedData = localStorage.getItem("streamingAppLiveData");
          if (storedData) {
            const data = JSON.parse(storedData);

            // Update display person (or clear it if null)
            setDisplayModePerson(data.person);

            // Update settings
            if (data.settings) {
              setDisplayModeSettings(data.settings);
            }
          }
        } catch (e) {
          console.error("Error loading live data:", e);
        }
      };

      // Load initial data
      loadLiveData();

      // Set up polling to regularly check for updates (every 500ms)
      const intervalId = setInterval(loadLiveData, 500);

      // Also listen for storage events (for updates from other tabs)
      const handleStorage = (e) => {
        if (e.key === "streamingAppLiveData") {
          loadLiveData();
        }
      };
      window.addEventListener("storage", handleStorage);

      // Clean up
      return () => {
        clearInterval(intervalId);
        window.removeEventListener("storage", handleStorage);
      };
    }
  }, [isDisplayMode]);

  // Handle drag events for file upload
  useEffect(() => {
    const handleDragOver = (e) => {
      e.preventDefault();
      e.stopPropagation();
    };

    const handleDragEnter = (e) => {
      e.preventDefault();
      e.stopPropagation();
      setDragActive(true);
    };

    const handleDragLeave = (e) => {
      e.preventDefault();
      e.stopPropagation();
      setDragActive(false);
    };

    const handleDrop = (e) => {
      e.preventDefault();
      e.stopPropagation();
      setDragActive(false);

      if (e.dataTransfer.files && e.dataTransfer.files[0]) {
        handleExcelFile(e.dataTransfer.files[0]);
      }
    };

    const dropArea = dropAreaRef.current;
    if (dropArea) {
      dropArea.addEventListener("dragover", handleDragOver);
      dropArea.addEventListener("dragenter", handleDragEnter);
      dropArea.addEventListener("dragleave", handleDragLeave);
      dropArea.addEventListener("drop", handleDrop);

      return () => {
        dropArea.removeEventListener("dragover", handleDragOver);
        dropArea.removeEventListener("dragenter", handleDragEnter);
        dropArea.removeEventListener("dragleave", handleDragLeave);
        dropArea.removeEventListener("drop", handleDrop);
      };
    }
  });

  // Handle selecting a person - now triggered by clicking the card
  const handleSelectPerson = (id) => {
    setPeople(
      people.map((person) => ({
        ...person,
        selected: person.id === id,
      })),
    );
  };

  // NEW: Go Live with currently selected person

  const handleGoLive = () => {
    if (selectedPerson) {
      const newLivePerson = {
        name: selectedPerson.name,
        surname: selectedPerson.surname,
        title: selectedPerson.title,
        id: selectedPerson.id,
      };

      // Update both the live person and settings
      setLivePerson(newLivePerson);
      setLiveSettings({ ...displaySettings }); // Copy current preview settings to live

      // Use the main update function with a slight delay to ensure state is updated
      setTimeout(() => {
        // Use the memoized function to update LIVE display (OBS)
        updatePreviewWindow();
        
        console.log("Going LIVE with:", newLivePerson, "and settings:", displaySettings);
      }, 50);
    }
  };
  // Handle adding a new person
  const handleAddPerson = () => {
    if (newPerson.name.trim() === "") return;

    const newId = Math.max(...people.map((p) => p.id), 0) + 1;
    setPeople([
      ...people,
      {
        id: newId,
        name: newPerson.name,
        surname: newPerson.surname,
        title: newPerson.title,
        selected: false,
        streaming: false,
      },
    ]);
    setNewPerson({ name: "", surname: "", title: "" });
  };

  // Start editing a person
  const handleStartEdit = (person) => {
    setEditingId(person.id);
    setEditForm({
      name: person.name,
      surname: person.surname,
      title: person.title,
    });
  };

  // Save edits to a person
  const handleSaveEdit = () => {
    if (editForm.name.trim() === "") return;

    const updatedPeople = people.map((person) =>
      person.id === editingId
        ? {
            ...person,
            name: editForm.name,
            surname: editForm.surname,
            title: editForm.title,
          }
        : person,
    );

    setPeople(updatedPeople);

    // Update livePerson if we're editing the currently live person
    if (livePerson && livePerson.id === editingId) {
      const updatedLivePerson = updatedPeople.find((p) => p.id === editingId);
      if (updatedLivePerson) {
        setLivePerson({ ...updatedLivePerson });
        // Update the display window using the message approach
        updatePreviewWithSettings(liveSettings); // Pass the settings, not the person
      }
    }

    setEditingId(null);
  };

  // Cancel editing
  const handleCancelEdit = () => {
    setEditingId(null);
  };

  // Handle removing a person
  const handleRemovePerson = (id) => {
    // If we're removing the currently live person, stop streaming
    if (livePerson && livePerson.id === id) {
      setLivePerson(null);

      // Clear from localStorage
      localStorage.setItem(
        "streamingAppLiveData",
        JSON.stringify({
          person: null,
          settings: liveSettings,
          timestamp: Date.now(),
        }),
      );

      // Also notify any open preview windows
      if (previewWindow && !previewWindow.closed) {
        previewWindow.postMessage(
          {
            type: "UPDATE_DISPLAY",
            data: {
              person: null,
              settings: liveSettings,
            },
          },
          "*",
        );
      }
    }

    setPeople(people.filter((person) => person.id !== id));
  };

  // Handle toggling display settings
  const handleToggleSetting = (setting) => {
    const newSettings = {
      ...displaySettings,
      [setting]: !displaySettings[setting],
    };
    setDisplaySettings(newSettings);
    
    // Only update LIVE settings if the current person is already live
    if (livePerson && selectedPerson && livePerson.id === selectedPerson.id) {
      const tempSettings = {
        ...liveSettings,
        [setting]: !liveSettings[setting],
      };
      setLiveSettings(tempSettings);
      updatePreviewWithSettings(tempSettings);
    }
    // Preview is updated via the useEffect that watches displaySettings
  };

  // Handle changing a display setting
  const handleChangeSetting = (setting, value) => {
    const newSettings = {
      ...displaySettings,
      [setting]: value,
    };
    setDisplaySettings(newSettings);
    
    // Only update LIVE settings if the current person is already live
    if (livePerson && selectedPerson && livePerson.id === selectedPerson.id) {
      const tempSettings = {
        ...liveSettings,
        [setting]: value,
      };
      setLiveSettings(tempSettings);
      updatePreviewWithSettings(tempSettings);
    }
    // Preview is updated via the useEffect that watches displaySettings
  };

  // Handle size changes
  const handleSizeChange = (setting, value) => {
    const numValue = parseInt(value, 10);
    if (!isNaN(numValue)) {
      const newSettings = {
        ...displaySettings,
        [setting]: numValue,
      };
      setDisplaySettings(newSettings);
      
      // Only update LIVE settings if the current person is already live
      if (livePerson && selectedPerson && livePerson.id === selectedPerson.id) {
        const tempSettings = {
          ...liveSettings,
          [setting]: numValue,
        };
        setLiveSettings(tempSettings);
        updatePreviewWithSettings(tempSettings);
      }
      // Preview is updated via the useEffect that watches displaySettings
    }
  };

  // Handle toggling display view with animation
  const handleDisplayToggle = () => {
    setIsDisplayActive(!isDisplayActive);
  };

  // Handle copying display URL
  const handleCopyDisplayUrl = () => {
    navigator.clipboard
      .writeText(getLiveDisplayUrl())
      .then(() => {
        alert("Display URL copied to clipboard!");
      })
      .catch((err) => {
        console.error("Failed to copy URL: ", err);
      });
  };

  // Handle opening the preview window
  const handleOpenDisplayWindow = () => {
    // Window size and position
    const width = 500;
    const height = 300;
    const left = window.screen.width / 2 - width / 2;
    const top = window.screen.height / 2 - height / 2;

    const features = `width=${width},height=${height},left=${left},top=${top},resizable,scrollbars=yes,status=yes`;

    // Close existing window if open
    if (previewWindow && !previewWindow.closed) {
      previewWindow.close();
    }

    // Open new window with the PREVIEW URL (not the same as OBS display)
    const newWindow = window.open(
      getPreviewDisplayUrl(),
      "displayPreview",
      features,
    );

    setPreviewWindow(newWindow);

    // Wait a bit for the window to load, then update with current data
    setTimeout(() => {
      if (newWindow && !newWindow.closed) {
        // Send PREVIEW data to the window
        newWindow.postMessage(
          {
            type: "UPDATE_PREVIEW",
            data: {
              person: selectedPerson ? {
                name: selectedPerson.name,
                surname: selectedPerson.surname,
                title: selectedPerson.title,
              } : null,
              settings: displaySettings,
            },
          },
          "*",
        );
        
        // Store preview data
        localStorage.setItem(
          "streamingAppPreviewData",
          JSON.stringify({
            person: selectedPerson ? {
              name: selectedPerson.name,
              surname: selectedPerson.surname,
              title: selectedPerson.title,
            } : null,
            settings: displaySettings,
          })
        );
      }
    }, 500);
  };
  // Process the Excel file
  const handleExcelFile = async (file) => {
    if (!file) return;

    setIsUploading(true);
    setUploadStatus(null);

    try {
      // Read the file
      const reader = new FileReader();

      reader.onload = (e) => {
        try {
          // Parse the Excel file
          const data = new Uint8Array(e.target.result);
          const workbook = window.XLSX.read(data, { type: "array" });

          // Get the first sheet
          const firstSheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[firstSheetName];

          // Convert to JSON
          const jsonData = window.XLSX.utils.sheet_to_json(worksheet);

          if (jsonData.length > 0) {
            // Map Excel data to our people structure
            // Try different possible column names for flexibility
            const newPeople = jsonData.map((row, index) => {
              // Try to find the right column names
              const nameField =
                row.Name ||
                row.name ||
                row.NAME ||
                row.FirstName ||
                row.firstname ||
                row["First Name"] ||
                "";
              const surnameField =
                row.Surname ||
                row.surname ||
                row.SURNAME ||
                row.LastName ||
                row.lastname ||
                row["Last Name"] ||
                "";
              const titleField =
                row.Title ||
                row.title ||
                row.TITLE ||
                row.Role ||
                row.role ||
                row.Position ||
                row.position ||
                "";

              return {
                id: Math.max(...people.map((p) => p.id), 0) + index + 1,
                name: nameField,
                surname: surnameField,
                title: titleField,
                selected: false,
                streaming: false,
              };
            });

            // Add new people to our list
            setPeople([...people, ...newPeople]);
            setUploadStatus({
              success: true,
              message: `Successfully imported ${newPeople.length} people from Excel`,
            });
          } else {
            throw new Error("No data found in Excel file");
          }
        } catch (error) {
          console.error("Error processing Excel file:", error);
          setUploadStatus({
            success: false,
            message: `Error processing the file: ${error.message}`,
          });
        }
        setIsUploading(false);
      };

      reader.onerror = () => {
        setUploadStatus({
          success: false,
          message: "Error reading the file",
        });
        setIsUploading(false);
      };

      // Read the file as an array buffer
      reader.readAsArrayBuffer(file);
    } catch (error) {
      console.error("Error handling file:", error);
      setUploadStatus({
        success: false,
        message: `Error handling the file: ${error.message}`,
      });
      setIsUploading(false);
    }
  };

  // Handle file upload from input
  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      handleExcelFile(file);
    }
    // Reset the file input
    event.target.value = "";
  };

  // Styles for display mode - shown when display=true is in URL
  const displayModeStyles = {
    width: "100%",
    height: "100%",
    background: "transparent",
    margin: 0,
    padding: 0,
  };

  // If we're in display mode, only render the DisplayOnly component
  if (isDisplayMode) {
    return (
      <div style={displayModeStyles}>
        {displayModePerson ? (
          <DisplayOnly
            person={displayModePerson}
            settings={displayModeSettings}
          />
        ) : (
          <div
            style={{
              width: "100%",
              height: "100%",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              backgroundColor: "transparent",
            }}
          >
            <div
              style={{
                textAlign: "center",
                color: "rgba(255, 255, 255, 0.7)",
                padding: "1rem",
              }}
            >
              <div style={{ marginBottom: "0.5rem" }}>
                No one is currently streaming
              </div>
              <div style={{ fontSize: "0.875rem" }}>
                Select a person and click "Go Live" to display them
              </div>
            </div>
          </div>
        )}
      </div>
    );
  }

  // Main app styles
  const appStyles = {
    display: "flex",
    height: "100vh",
    background: "linear-gradient(to bottom right, #111827, #1F2937, #111827)",
    color: "white",
    fontFamily: "sans-serif",
    overflow: "hidden",
  };

  // Sidebar styles
  const sidebarStyles = {
    width: "25%",
    padding: "1rem",
    display: "flex",
    flexDirection: "column",
    background: "rgba(0, 0, 0, 0.2)",
    backdropFilter: "blur(4px)",
    borderRight: "1px solid rgba(255, 255, 255, 0.1)",
    overflowY: "auto",
  };

  // Center content styles
  const centerContentStyles = {
    width: "50%",
    padding: "1.5rem",
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
  };

  // Title styles
  const titleStyles = {
    fontSize: "1.875rem",
    marginBottom: "2rem",
    fontWeight: "bold",
    background: "linear-gradient(to right, #93C5FD, #D8B4FE)",
    WebkitBackgroundClip: "text",
    WebkitTextFillColor: "transparent",
    backgroundClip: "text",
    color: "transparent",
  };

  // Tab navigation styles
  const tabNavStyles = {
    display: "flex",
    marginBottom: "1rem",
    background: "rgba(0, 0, 0, 0.3)",
    borderRadius: "0.5rem",
    padding: "0.25rem",
  };

  // Tab button styles
  const getTabButtonStyles = (tab) => ({
    flex: 1,
    padding: "0.5rem 0",
    borderRadius: "0.375rem",
    transition: "all 0.2s",
    backgroundColor:
      currentTab === tab ? "rgba(255, 255, 255, 0.2)" : "transparent",
    color: currentTab === tab ? "white" : "rgba(255, 255, 255, 0.5)",
    border: "none",
    cursor: "pointer",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
  });

  // Person card styles
  const getPersonCardStyles = (person) => ({
    padding: "1rem",
    backgroundColor:
      person.id === livePerson?.id
        ? "rgba(20, 83, 45, 0.3)"
        : "rgba(255, 255, 255, 0.1)",
    backdropFilter: "blur(4px)",
    borderRadius: "0.5rem",
    color: "white",
    transition: "all 0.3s",
    marginBottom: "0.5rem",
    border: person.selected
      ? "4px solid #3B82F6"
      : person.id === livePerson?.id
        ? "1px solid rgba(34, 197, 94, 0.5)"
        : "1px solid rgba(255, 255, 255, 0.1)",
    cursor: "pointer", // Add cursor pointer to indicate it's clickable
  });

  // Button styles
  const buttonStyles = {
    primary: {
      padding: "0.5rem 1rem",
      backgroundColor: "#3B82F6",
      color: "white",
      border: "none",
      borderRadius: "0.375rem",
      cursor: "pointer",
      transition: "background-color 0.2s",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
    },
    secondary: {
      padding: "0.5rem 1rem",
      backgroundColor: "rgba(255, 255, 255, 0.1)",
      color: "rgba(255, 255, 255, 0.7)",
      border: "none",
      borderRadius: "0.375rem",
      cursor: "pointer",
      transition: "background-color 0.2s",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
    },
    danger: {
      padding: "0.5rem 1rem",
      backgroundColor: "#DC2626",
      color: "white",
      border: "none",
      borderRadius: "0.375rem",
      cursor: "pointer",
      transition: "background-color 0.2s",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
    },
    success: {
      padding: "0.5rem 1rem",
      backgroundColor: "#16A34A",
      color: "white",
      border: "none",
      borderRadius: "0.375rem",
      cursor: "pointer",
      transition: "background-color 0.2s",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
    },
    icon: {
      padding: "0.5rem",
      backgroundColor: "transparent",
      color: "rgba(255, 255, 255, 0.5)",
      border: "none",
      borderRadius: "0.375rem",
      cursor: "pointer",
      transition: "all 0.2s",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
    },
  };

  // Input styles
  const inputStyles = {
    width: "100%",
    padding: "0.5rem",
    borderRadius: "0.375rem",
    border: "1px solid rgba(255, 255, 255, 0.3)",
    backgroundColor: "#1F2937",
    color: "white",
    outline: "none",
    marginBottom: "0.5rem",
  };

  // Preview container styles
  const previewContainerStyles = {
    marginTop: "1rem",
    width: "100%",
    maxWidth: "36rem",
  };

  // Preview header styles
  const previewHeaderStyles = {
    background: "linear-gradient(to right, #1F2937, #111827)",
    color: "white",
    padding: "0.75rem 1.5rem",
    fontSize: "1.125rem",
    borderTopLeftRadius: "0.5rem",
    borderTopRightRadius: "0.5rem",
    fontWeight: "500",
    display: "flex",
    alignItems: "center",
    justifyContent: "space-between",
    borderBottom: "1px solid rgba(255, 255, 255, 0.1)",
  };

  // Preview content styles
  const previewContentStyles = {
    backgroundColor: "rgba(0, 0, 0, 0.4)",
    backdropFilter: "blur(4px)",
    borderBottomLeftRadius: "0.5rem",
    borderBottomRightRadius: "0.5rem",
    padding: "1.5rem",
    width: "100%",
    border: "1px solid rgba(255, 255, 255, 0.1)",
    boxShadow:
      "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1)",
  };

  // Preview area styles
  const previewAreaStyles = {
    border: "1px dashed rgba(255, 255, 255, 0.2)",
    padding: "2rem",
    borderRadius: "0.5rem",
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    minHeight: "10rem",
    backgroundColor: "rgba(0, 0, 0, 0.4)",
  };

  // Quick settings container styles
  const quickSettingsContainerStyles = {
    marginTop: "1.5rem",
    backgroundColor: "rgba(255, 255, 255, 0.05)",
    borderRadius: "0.5rem",
    border: "1px solid rgba(255, 255, 255, 0.1)",
    padding: "1rem",
  };

  // Style presets container styles
  const stylePresetsContainerStyles = {
    marginTop: "1.5rem",
  };

  // Style preset button styles
  const stylePresetButtonStyles = (preset) => ({
    padding: "0.75rem",
    borderRadius: "0.5rem",
    border: "1px solid rgba(255, 255, 255, 0.2)",
    boxShadow:
      "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1)",
    transition: "all 0.2s",
    textAlign: "center",
    cursor: "pointer",
    background:
      preset === "gradient"
        ? "linear-gradient(to right, rgba(49, 46, 129, 0.9), rgba(88, 28, 135, 0.9))"
        : preset === "minimal"
          ? "rgba(0, 0, 0, 0.8)"
          : "rgba(0, 0, 0, 0.4)",
    borderLeft: preset === "accented" ? "4px solid #EC4899" : undefined,
  });

  // Settings section styles
  const settingsSectionStyles = {
    backgroundColor: "rgba(255, 255, 255, 0.1)",
    padding: "1rem",
    borderRadius: "0.5rem",
    border: "1px solid rgba(255, 255, 255, 0.1)",
    marginBottom: "1rem",
  };

  // Settings heading styles
  const settingsHeadingStyles = {
    fontSize: "1.125rem",
    fontWeight: "500",
    marginBottom: "1rem",
    display: "flex",
    alignItems: "center",
  };

  // Settings option styles
  const settingsOptionStyles = {
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    padding: "0.5rem",
    borderRadius: "0.5rem",
    transition: "background-color 0.2s",
    marginBottom: "0.75rem",
  };

  // Toggle switch container styles
  const toggleSwitchContainerStyles = {
    display: "inline-flex",
    alignItems: "center",
    cursor: "pointer",
  };

  // Toggle switch styles
  const toggleSwitchStyles = (isActive) => ({
    width: "2.75rem",
    height: "1.5rem",
    backgroundColor: isActive
      ? "rgba(37, 99, 235, 0.8)"
      : "rgba(55, 65, 81, 0.5)",
    borderRadius: "9999px",
    position: "relative",
    transition: "background-color 0.2s",
  });

  // Toggle switch knob styles
  const toggleSwitchKnobStyles = (isActive) => ({
    position: "absolute",
    top: "2px",
    left: isActive ? "calc(100% - 1.25rem - 2px)" : "2px",
    backgroundColor: "white",
    border: "1px solid rgba(0, 0, 0, 0.1)",
    borderRadius: "9999px",
    height: "1.25rem",
    width: "1.25rem",
    transition: "all 0.2s",
  });

  // Import container styles
  const importContainerStyles = {
    border: "1px dashed rgba(255, 255, 255, 0.2)",
    borderRadius: "0.5rem",
    padding: "1rem",
    backgroundColor: "rgba(255, 255, 255, 0.05)",
    textAlign: "center",
    marginTop: "1rem",
  };

  // Upload area styles - enhanced for drag and drop
  const uploadAreaStyles = {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    width: "100%",
    height: "5rem",
    border: dragActive
      ? "2px dashed #3B82F6"
      : "2px dashed rgba(255, 255, 255, 0.2)",
    borderRadius: "0.5rem",
    cursor: "pointer",
    backgroundColor: dragActive
      ? "rgba(59, 130, 246, 0.1)"
      : "rgba(31, 41, 55, 0.5)",
    transition: "all 0.3s",
  };

  // Modal overlay styles
  const modalOverlayStyles = {
    position: "fixed",
    inset: 0,
    backgroundColor: "rgba(0, 0, 0, 0.7)",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    zIndex: 50,
    backdropFilter: "blur(4px)",
  };

  // Modal container styles
  const modalContainerStyles = {
    background: "linear-gradient(to bottom, #111827, #000000)",
    border: "1px solid rgba(255, 255, 255, 0.2)",
    borderRadius: "0.5rem",
    padding: "1.5rem",
    maxWidth: "42rem",
    width: "100%",
    maxHeight: "80vh",
    overflowY: "auto",
  };

  // Modal header styles
  const modalHeaderStyles = {
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: "1rem",
  };

  // Fixed preview styles
  const fixedPreviewStyles = {
    position: "fixed",
    top: "1rem",
    right: "1rem",
    zIndex: 50,
    backgroundColor: "rgba(0, 0, 0, 0.8)",
    padding: "1rem",
    borderRadius: "0.5rem",
    border: "1px solid rgba(255, 255, 255, 0.2)",
    boxShadow:
      "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1)",
    animation: "fadeIn 0.5s ease-in",
    maxWidth: "400px",
  };

  // Render main app
  return (
    <div style={appStyles}>
      {/* Left sidebar - People Management */}
      <div style={sidebarStyles}>
        <div
          style={{
            marginBottom: "1rem",
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
          }}
        >
          <h2
            style={{
              fontSize: "1.5rem",
              fontWeight: "bold",
              background: "linear-gradient(to right, #93C5FD, #D8B4FE)",
              WebkitBackgroundClip: "text",
              WebkitTextFillColor: "transparent",
              backgroundClip: "text",
            }}
          >
            Streamer
          </h2>
          <button
            onClick={() => setShowTutorial(true)}
            style={{ ...buttonStyles.icon, color: "rgba(255, 255, 255, 0.6)" }}
          >
            <HelpCircle size={20} />
          </button>
        </div>

        {/* Navigation Tabs */}
        <div style={tabNavStyles}>
          <button
            style={getTabButtonStyles("people")}
            onClick={() => setCurrentTab("people")}
          >
            <Type size={16} style={{ marginRight: "0.5rem" }} />
            People
          </button>
          <button
            style={getTabButtonStyles("appearance")}
            onClick={() => setCurrentTab("appearance")}
          >
            <Palette size={16} style={{ marginRight: "0.5rem" }} />
            Style
          </button>
          <button
            style={getTabButtonStyles("preview")}
            onClick={() => setCurrentTab("preview")}
          >
            <Monitor size={16} style={{ marginRight: "0.5rem" }} />
            Preview
          </button>
        </div>

        {/* People Tab Content */}
        {currentTab === "people" && (
          <>
            {/* People list */}
            <div
              style={{
                marginBottom: "1rem",
                maxHeight: "calc(100vh - 280px)",
                overflowY: "auto",
              }}
            >
              {people.length === 0 ? (
                <div
                  style={{
                    textAlign: "center",
                    padding: "1.5rem",
                    border: "1px dashed rgba(255, 255, 255, 0.2)",
                    borderRadius: "0.5rem",
                    backgroundColor: "rgba(255, 255, 255, 0.05)",
                  }}
                >
                  <p style={{ color: "rgba(255, 255, 255, 0.6)" }}>
                    No people added yet
                  </p>
                  <p
                    style={{
                      color: "rgba(255, 255, 255, 0.4)",
                      fontSize: "0.875rem",
                      marginTop: "0.5rem",
                    }}
                  >
                    Add people manually or import from Excel
                  </p>
                </div>
              ) : (
                people.map((person) => (
                  <div
                    key={person.id}
                    style={getPersonCardStyles(person)}
                    onClick={() => handleSelectPerson(person.id)} // Make the entire card clickable for selection
                  >
                    {editingId === person.id ? (
                      // Edit mode
                      <div
                        style={{
                          display: "flex",
                          flexDirection: "column",
                          gap: "0.5rem",
                        }}
                        onClick={(e) => e.stopPropagation()} // Prevent selection when editing
                      >
                        <input
                          type="text"
                          placeholder="Name"
                          style={inputStyles}
                          value={editForm.name}
                          onChange={(e) =>
                            setEditForm({ ...editForm, name: e.target.value })
                          }
                        />
                        <input
                          type="text"
                          placeholder="Surname (optional)"
                          style={inputStyles}
                          value={editForm.surname}
                          onChange={(e) =>
                            setEditForm({
                              ...editForm,
                              surname: e.target.value,
                            })
                          }
                        />
                        <input
                          type="text"
                          placeholder="Title (optional)"
                          style={inputStyles}
                          value={editForm.title}
                          onChange={(e) =>
                            setEditForm({ ...editForm, title: e.target.value })
                          }
                        />
                        <div style={{ display: "flex", gap: "0.5rem" }}>
                          <button
                            onClick={handleSaveEdit}
                            style={{ ...buttonStyles.primary, flex: 1 }}
                          >
                            <Save size={16} style={{ marginRight: "0.5rem" }} />{" "}
                            Save
                          </button>
                          <button
                            onClick={handleCancelEdit}
                            style={{ ...buttonStyles.secondary, flex: 1 }}
                          >
                            <X size={16} style={{ marginRight: "0.5rem" }} />{" "}
                            Cancel
                          </button>
                        </div>
                      </div>
                    ) : (
                      // View mode
                      <>
                        <div
                          style={{
                            display: "flex",
                            flexDirection: "column",
                            marginBottom: "0.5rem",
                          }}
                        >
                          <span
                            style={{ fontWeight: "500", fontSize: "1.125rem" }}
                          >
                            {person.name} {person.surname && person.surname}
                          </span>
                          {person.title && (
                            <span
                              style={{
                                fontSize: "0.875rem",
                                color: "rgba(255, 255, 255, 0.7)",
                                fontStyle: "italic",
                              }}
                            >
                              {person.title}
                            </span>
                          )}
                        </div>

                        <div
                          style={{
                            display: "flex",
                            justifyContent: "space-between",
                            alignItems: "center",
                            marginTop: "0.75rem",
                          }}
                          onClick={(e) => e.stopPropagation()} // Prevent selection when clicking buttons
                        >
                          <div style={{ display: "flex", gap: "0.5rem" }}>
                            <button
                              onClick={handleGoLive}
                              style={{
                                ...buttonStyles.secondary,
                                backgroundColor:
                                  person.id === livePerson?.id
                                    ? "#16A34A"
                                    : !person.selected
                                      ? "rgba(255, 255, 255, 0.08)" // Dimmed when not selected
                                      : "rgba(255, 255, 255, 0.15)", // Normal when selected
                                color:
                                  person.id === livePerson?.id
                                    ? "white"
                                    : !person.selected
                                      ? "rgba(255, 255, 255, 0.5)" // Dimmed text when not selected
                                      : "rgba(255, 255, 255, 0.9)", // Brighter text when selected
                                cursor: !person.selected
                                  ? "not-allowed"
                                  : "pointer",
                                opacity: !person.selected ? 0.7 : 1,
                              }}
                              disabled={!person.selected}
                            >
                              <Play
                                size={14}
                                style={{ marginRight: "0.25rem" }}
                              />{" "}
                              {person.id === livePerson?.id
                                ? "Live"
                                : "Go Live"}
                            </button>
                          </div>

                          <div style={{ display: "flex", gap: "0.25rem" }}>
                            <button
                              onClick={() => handleStartEdit(person)}
                              style={buttonStyles.icon}
                            >
                              <Edit size={14} />
                            </button>
                            <button
                              onClick={() => handleRemovePerson(person.id)}
                              style={{
                                ...buttonStyles.icon,
                                color: "rgba(255, 255, 255, 0.5)",
                                ":hover": { color: "#F87171" },
                              }}
                            >
                              <X size={14} />
                            </button>
                          </div>
                        </div>
                      </>
                    )}
                  </div>
                ))
              )}
            </div>

            {/* Add new person form */}
            <div style={{ ...settingsSectionStyles, marginBottom: "1rem" }}>
              <h3
                style={{
                  fontWeight: "bold",
                  marginBottom: "0.75rem",
                  color: "white",
                }}
              >
                Add New Person
              </h3>
              <div
                style={{
                  display: "flex",
                  flexDirection: "column",
                  gap: "0.5rem",
                }}
              >
                <input
                  type="text"
                  placeholder="Name"
                  style={inputStyles}
                  value={newPerson.name}
                  onChange={(e) =>
                    setNewPerson({ ...newPerson, name: e.target.value })
                  }
                />
                <input
                  type="text"
                  placeholder="Surname (optional)"
                  style={inputStyles}
                  value={newPerson.surname}
                  onChange={(e) =>
                    setNewPerson({ ...newPerson, surname: e.target.value })
                  }
                />
                <input
                  type="text"
                  placeholder="Title (optional)"
                  style={inputStyles}
                  value={newPerson.title}
                  onChange={(e) =>
                    setNewPerson({ ...newPerson, title: e.target.value })
                  }
                />
                <button
                  onClick={handleAddPerson}
                  disabled={!newPerson.name.trim()}
                  style={{
                    width: "100%",
                    padding: "0.5rem",
                    borderRadius: "0.375rem",
                    fontWeight: "500",
                    transition: "all 0.2s",
                    cursor: newPerson.name.trim() ? "pointer" : "not-allowed",
                    background: newPerson.name.trim()
                      ? "linear-gradient(to right, #2563EB, #7C3AED)"
                      : "rgba(255, 255, 255, 0.1)",
                    color: newPerson.name.trim()
                      ? "white"
                      : "rgba(255, 255, 255, 0.5)",
                    border: "none",
                  }}
                >
                  Add Person
                </button>
              </div>
            </div>

            {/* Excel Import with Drag & Drop */}
            <div style={importContainerStyles}>
              <h3
                style={{
                  fontWeight: "bold",
                  marginBottom: "0.5rem",
                  color: "white",
                }}
              >
                Import from Excel
              </h3>
              <p
                style={{
                  color: "rgba(255, 255, 255, 0.7)",
                  fontSize: "0.875rem",
                  marginBottom: "0.5rem",
                }}
              >
                Upload an Excel sheet with columns for Name, Surname, and Title
              </p>

              <div
                ref={dropAreaRef}
                style={uploadAreaStyles}
                onClick={() => document.getElementById("fileInput").click()}
              >
                <div
                  style={{
                    display: "flex",
                    flexDirection: "column",
                    alignItems: "center",
                    justifyContent: "center",
                    padding: "1rem 0",
                  }}
                >
                  <Upload
                    style={{
                      width: "1.5rem",
                      height: "1.5rem",
                      marginBottom: "0.25rem",
                      color: dragActive
                        ? "#3B82F6"
                        : "rgba(255, 255, 255, 0.7)",
                      animation: isUploading ? "bounce 1s infinite" : "none",
                    }}
                  />
                  <p
                    style={{
                      fontSize: "0.875rem",
                      color: dragActive
                        ? "#3B82F6"
                        : "rgba(255, 255, 255, 0.7)",
                    }}
                  >
                    <span style={{ fontWeight: "600" }}>
                      {dragActive
                        ? "Drop file here"
                        : "Drag & drop or click to upload"}
                    </span>
                  </p>
                </div>
                <input
                  id="fileInput"
                  type="file"
                  style={{ display: "none" }}
                  accept=".xlsx, .xls"
                  onChange={handleFileUpload}
                  disabled={isUploading}
                />
              </div>

              {uploadStatus && (
                <div
                  style={{
                    marginTop: "0.5rem",
                    padding: "0.5rem",
                    borderRadius: "0.375rem",
                    fontSize: "0.875rem",
                    backgroundColor: uploadStatus.success
                      ? "rgba(34, 197, 94, 0.2)"
                      : "rgba(239, 68, 68, 0.2)",
                    color: uploadStatus.success ? "#DCFCE7" : "#FEE2E2",
                  }}
                >
                  {uploadStatus.success ? (
                    <div style={{ display: "flex", alignItems: "center" }}>
                      <Check size={14} style={{ marginRight: "0.25rem" }} />
                      {uploadStatus.message}
                    </div>
                  ) : (
                    <div style={{ display: "flex", alignItems: "center" }}>
                      <AlertCircle
                        size={14}
                        style={{ marginRight: "0.25rem" }}
                      />
                      {uploadStatus.message}
                    </div>
                  )}
                </div>
              )}
            </div>
          </>
        )}

        {/* Appearance Tab Content */}
        {currentTab === "appearance" && (
          <div
            style={{ display: "flex", flexDirection: "column", gap: "1rem" }}
          >
            {/* Sizing Settings */}
            <div style={settingsSectionStyles}>
              <h3 style={{ ...settingsHeadingStyles, color: "white" }}>
                <Maximize
                  size={18}
                  style={{ marginRight: "0.5rem", color: "#C084FC" }}
                />{" "}
                Size Settings
              </h3>

              <div
                style={{
                  display: "grid",
                  gridTemplateColumns: "auto 1fr",
                  gap: "0.75rem 1rem",
                  alignItems: "center",
                }}
              >
                <label style={{ color: "rgba(255, 255, 255, 0.8)" }}>
                  Width:
                </label>
                <div style={{ display: "flex", alignItems: "center" }}>
                  <input
                    type="range"
                    min="200"
                    max="800"
                    value={displaySettings.displayWidth || 400}
                    onChange={(e) =>
                      handleSizeChange("displayWidth", e.target.value)
                    }
                    style={{ flex: 1, marginRight: "0.5rem" }}
                  />
                  <input
                    type="number"
                    min="200"
                    max="800"
                    value={displaySettings.displayWidth || 400}
                    onChange={(e) =>
                      handleSizeChange("displayWidth", e.target.value)
                    }
                    style={{
                      width: "60px",
                      padding: "0.25rem",
                      textAlign: "center",
                      backgroundColor: "#1F2937",
                      color: "white",
                      border: "1px solid rgba(255, 255, 255, 0.2)",
                      borderRadius: "0.25rem",
                    }}
                  />
                  <span
                    style={{
                      marginLeft: "0.25rem",
                      fontSize: "0.875rem",
                      color: "rgba(255, 255, 255, 0.6)",
                    }}
                  >
                    px
                  </span>
                </div>

                <label style={{ color: "rgba(255, 255, 255, 0.8)" }}>
                  Height:
                </label>
                <div style={{ display: "flex", alignItems: "center" }}>
                  <input
                    type="range"
                    min="80"
                    max="400"
                    value={displaySettings.displayHeight || 120}
                    onChange={(e) =>
                      handleSizeChange("displayHeight", e.target.value)
                    }
                    style={{ flex: 1, marginRight: "0.5rem" }}
                  />
                  <input
                    type="number"
                    min="80"
                    max="400"
                    value={displaySettings.displayHeight || 120}
                    onChange={(e) =>
                      handleSizeChange("displayHeight", e.target.value)
                    }
                    style={{
                      width: "60px",
                      padding: "0.25rem",
                      textAlign: "center",
                      backgroundColor: "#1F2937",
                      color: "white",
                      border: "1px solid rgba(255, 255, 255, 0.2)",
                      borderRadius: "0.25rem",
                    }}
                  />
                  <span
                    style={{
                      marginLeft: "0.25rem",
                      fontSize: "0.875rem",
                      color: "rgba(255, 255, 255, 0.6)",
                    }}
                  >
                    px
                  </span>
                </div>

                <label style={{ color: "rgba(255, 255, 255, 0.8)" }}>
                  Name Size:
                </label>
                <div style={{ display: "flex", alignItems: "center" }}>
                  <input
                    type="range"
                    min="16"
                    max="60"
                    value={displaySettings.fontSize || 30}
                    onChange={(e) =>
                      handleSizeChange("fontSize", e.target.value)
                    }
                    style={{ flex: 1, marginRight: "0.5rem" }}
                  />
                  <input
                    type="number"
                    min="16"
                    max="60"
                    value={displaySettings.fontSize || 30}
                    onChange={(e) =>
                      handleSizeChange("fontSize", e.target.value)
                    }
                    style={{
                      width: "60px",
                      padding: "0.25rem",
                      textAlign: "center",
                      backgroundColor: "#1F2937",
                      color: "white",
                      border: "1px solid rgba(255, 255, 255, 0.2)",
                      borderRadius: "0.25rem",
                    }}
                  />
                  <span
                    style={{
                      marginLeft: "0.25rem",
                      fontSize: "0.875rem",
                      color: "rgba(255, 255, 255, 0.6)",
                    }}
                  >
                    px
                  </span>
                </div>

                <label style={{ color: "rgba(255, 255, 255, 0.8)" }}>
                  Title Size:
                </label>
                <div style={{ display: "flex", alignItems: "center" }}>
                  <input
                    type="range"
                    min="12"
                    max="40"
                    value={displaySettings.titleFontSize || 20}
                    onChange={(e) =>
                      handleSizeChange("titleFontSize", e.target.value)
                    }
                    style={{ flex: 1, marginRight: "0.5rem" }}
                  />
                  <input
                    type="number"
                    min="12"
                    max="40"
                    value={displaySettings.titleFontSize || 20}
                    onChange={(e) =>
                      handleSizeChange("titleFontSize", e.target.value)
                    }
                    style={{
                      width: "60px",
                      padding: "0.25rem",
                      textAlign: "center",
                      backgroundColor: "#1F2937",
                      color: "white",
                      border: "1px solid rgba(255, 255, 255, 0.2)",
                      borderRadius: "0.25rem",
                    }}
                  />
                  <span
                    style={{
                      marginLeft: "0.25rem",
                      fontSize: "0.875rem",
                      color: "rgba(255, 255, 255, 0.6)",
                    }}
                  >
                    px
                  </span>
                </div>
              </div>
            </div>

            <div style={settingsSectionStyles}>
              <h3 style={{ ...settingsHeadingStyles, color: "white" }}>
                <Palette
                  size={18}
                  style={{ marginRight: "0.5rem", color: "#C084FC" }}
                />{" "}
                Display Style
              </h3>

              <div
                style={{
                  display: "flex",
                  flexDirection: "column",
                  gap: "0.75rem",
                }}
              >
                <div
                  style={{
                    display: "flex",
                    flexDirection: "column",
                    gap: "0.5rem",
                  }}
                >
                  <label
                    style={{
                      fontSize: "0.875rem",
                      color: "rgba(255, 255, 255, 0.7)",
                    }}
                  >
                    Background
                  </label>
                  <div
                    style={{
                      display: "grid",
                      gridTemplateColumns: "repeat(2, minmax(0, 1fr))",
                      gap: "0.5rem",
                    }}
                  >
                    <button
                      onClick={() =>
                        handleChangeSetting("displayStyle", "gradient")
                      }
                      style={{
                        padding: "0.5rem",
                        borderRadius: "0.5rem",
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        background:
                          "linear-gradient(to right, #312E81, #581C87)",
                        boxShadow:
                          displaySettings.displayStyle === "gradient"
                            ? "0 0 0 2px #A855F7"
                            : "none",
                        border: "none",
                        color: "white",
                        cursor: "pointer",
                      }}
                    >
                      Gradient
                    </button>
                    <button
                      onClick={() =>
                        handleChangeSetting("displayStyle", "solid")
                      }
                      style={{
                        padding: "0.5rem",
                        borderRadius: "0.5rem",
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        backgroundColor: "black",
                        boxShadow:
                          displaySettings.displayStyle === "solid"
                            ? "0 0 0 2px #A855F7"
                            : "none",
                        border: "none",
                        color: "white",
                        cursor: "pointer",
                      }}
                    >
                      Solid
                    </button>
                    <button
                      onClick={() =>
                        handleChangeSetting("displayStyle", "transparent")
                      }
                      style={{
                        padding: "0.5rem",
                        borderRadius: "0.5rem",
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        backgroundColor: "rgba(0, 0, 0, 0.4)",
                        boxShadow:
                          displaySettings.displayStyle === "transparent"
                            ? "0 0 0 2px #A855F7"
                            : "none",
                        border: "none",
                        color: "white",
                        cursor: "pointer",
                      }}
                    >
                      Transparent
                    </button>
                    <button
                      onClick={() =>
                        handleChangeSetting("displayStyle", "minimal")
                      }
                      style={{
                        padding: "0.5rem",
                        borderRadius: "0.5rem",
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        backgroundColor: "transparent",
                        boxShadow:
                          displaySettings.displayStyle === "minimal"
                            ? "0 0 0 2px #A855F7"
                            : "none",
                        border: "none",
                        color: "white",
                        cursor: "pointer",
                      }}
                    >
                      Minimal
                    </button>
                  </div>
                </div>

                <div
                  style={{
                    display: "flex",
                    flexDirection: "column",
                    gap: "0.5rem",
                  }}
                >
                  <label
                    style={{
                      fontSize: "0.875rem",
                      color: "rgba(255, 255, 255, 0.7)",
                    }}
                  >
                    Text Style
                  </label>
                  <div
                    style={{
                      display: "grid",
                      gridTemplateColumns: "repeat(3, minmax(0, 1fr))",
                      gap: "0.5rem",
                    }}
                  >
                    <button
                      onClick={() => handleChangeSetting("textStyle", "normal")}
                      style={{
                        padding: "0.5rem",
                        borderRadius: "0.5rem",
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        backgroundColor:
                          displaySettings.textStyle === "normal"
                            ? "rgba(255, 255, 255, 0.2)"
                            : "rgba(255, 255, 255, 0.1)",
                        boxShadow:
                          displaySettings.textStyle === "normal"
                            ? "0 0 0 2px #A855F7"
                            : "none",
                        border: "none",
                        color: "white",
                        cursor: "pointer",
                      }}
                    >
                      Normal
                    </button>
                    <button
                      onClick={() => handleChangeSetting("textStyle", "bold")}
                      style={{
                        padding: "0.5rem",
                        borderRadius: "0.5rem",
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        backgroundColor:
                          displaySettings.textStyle === "bold"
                            ? "rgba(255, 255, 255, 0.2)"
                            : "rgba(255, 255, 255, 0.1)",
                        boxShadow:
                          displaySettings.textStyle === "bold"
                            ? "0 0 0 2px #A855F7"
                            : "none",
                        border: "none",
                        color: "white",
                        fontWeight: "bold",
                        cursor: "pointer",
                      }}
                    >
                      Bold
                    </button>
                    <button
                      onClick={() => handleChangeSetting("textStyle", "light")}
                      style={{
                        padding: "0.5rem",
                        borderRadius: "0.5rem",
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        backgroundColor:
                          displaySettings.textStyle === "light"
                            ? "rgba(255, 255, 255, 0.2)"
                            : "rgba(255, 255, 255, 0.1)",
                        boxShadow:
                          displaySettings.textStyle === "light"
                            ? "0 0 0 2px #A855F7"
                            : "none",
                        border: "none",
                        color: "white",
                        fontWeight: "lighter",
                        cursor: "pointer",
                      }}
                    >
                      Light
                    </button>
                  </div>
                </div>

                <div
                  style={{
                    display: "flex",
                    flexDirection: "column",
                    gap: "0.5rem",
                  }}
                >
                  <label
                    style={{
                      fontSize: "0.875rem",
                      color: "rgba(255, 255, 255, 0.7)",
                    }}
                  >
                    Border Style
                  </label>
                  <div
                    style={{
                      display: "grid",
                      gridTemplateColumns: "repeat(2, minmax(0, 1fr))",
                      gap: "0.5rem",
                    }}
                  >
                    <button
                      onClick={() => handleChangeSetting("borderStyle", "none")}
                      style={{
                        padding: "0.5rem",
                        borderRadius: "0.5rem",
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        backgroundColor:
                          displaySettings.borderStyle === "none"
                            ? "rgba(255, 255, 255, 0.2)"
                            : "rgba(255, 255, 255, 0.1)",
                        boxShadow:
                          displaySettings.borderStyle === "none"
                            ? "0 0 0 2px #A855F7"
                            : "none",
                        border: "none",
                        color: "white",
                        cursor: "pointer",
                      }}
                    >
                      None
                    </button>
                    <button
                      onClick={() => handleChangeSetting("borderStyle", "thin")}
                      style={{
                        padding: "0.5rem",
                        borderRadius: "0.5rem",
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        backgroundColor:
                          displaySettings.borderStyle === "thin"
                            ? "rgba(255, 255, 255, 0.2)"
                            : "rgba(255, 255, 255, 0.1)",
                        boxShadow:
                          displaySettings.borderStyle === "thin"
                            ? "0 0 0 2px #A855F7"
                            : "none",
                        border: "1px solid rgba(255, 255, 255, 0.3)",
                        color: "white",
                        cursor: "pointer",
                      }}
                    >
                      Thin
                    </button>
                    <button
                      onClick={() => handleChangeSetting("borderStyle", "glow")}
                      style={{
                        padding: "0.5rem",
                        borderRadius: "0.5rem",
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        backgroundColor:
                          displaySettings.borderStyle === "glow"
                            ? "rgba(255, 255, 255, 0.2)"
                            : "rgba(255, 255, 255, 0.1)",
                        boxShadow:
                          displaySettings.borderStyle === "glow"
                            ? "0 0 0 2px rgba(168, 85, 247, 0.7), 0 10px 15px -3px rgba(168, 85, 247, 0.3)"
                            : "none",
                        border: "none",
                        color: "white",
                        cursor: "pointer",
                      }}
                    >
                      Glow
                    </button>
                    <button
                      onClick={() =>
                        handleChangeSetting("borderStyle", "accent")
                      }
                      style={{
                        padding: "0.5rem",
                        borderRadius: "0.5rem",
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        backgroundColor:
                          displaySettings.borderStyle === "accent"
                            ? "rgba(255, 255, 255, 0.2)"
                            : "rgba(255, 255, 255, 0.1)",
                        boxShadow:
                          displaySettings.borderStyle === "accent"
                            ? "0 0 0 2px #A855F7"
                            : "none",
                        borderLeft: "4px solid #EC4899",
                        borderTop: "1px solid rgba(255, 255, 255, 0.2)",
                        borderRight: "1px solid rgba(255, 255, 255, 0.2)",
                        borderBottom: "1px solid rgba(255, 255, 255, 0.2)",
                        color: "white",
                        cursor: "pointer",
                      }}
                    >
                      Accent
                    </button>
                  </div>
                </div>
              </div>
            </div>

            <div style={settingsSectionStyles}>
              <h3 style={{ ...settingsHeadingStyles, color: "white" }}>
                <Sliders
                  size={18}
                  style={{ marginRight: "0.5rem", color: "#C084FC" }}
                />{" "}
                Effects
              </h3>

              <div
                style={{
                  display: "flex",
                  flexDirection: "column",
                  gap: "0.75rem",
                }}
              >
                <div
                  style={{
                    ...settingsOptionStyles,
                    backgroundColor: "rgba(255, 255, 255, 0.05)",
                  }}
                >
                  <div>
                    <div style={{ color: "white" }}>Text Shadow</div>
                    <div
                      style={{
                        color: "rgba(255, 255, 255, 0.6)",
                        fontSize: "0.875rem",
                      }}
                    >
                      Add shadow to text for better visibility
                    </div>
                  </div>
                  <label style={toggleSwitchContainerStyles}>
                    <div style={toggleSwitchStyles(displaySettings.textShadow)}>
                      <div
                        style={toggleSwitchKnobStyles(
                          displaySettings.textShadow,
                        )}
                      ></div>
                    </div>
                    <input
                      type="checkbox"
                      style={{
                        position: "absolute",
                        width: 1,
                        height: 1,
                        padding: 0,
                        margin: -1,
                        overflow: "hidden",
                        clip: "rect(0, 0, 0, 0)",
                        whiteSpace: "nowrap",
                        borderWidth: 0,
                      }}
                      checked={displaySettings.textShadow}
                      onChange={() => handleToggleSetting("textShadow")}
                    />
                  </label>
                </div>

                <div
                  style={{
                    ...settingsOptionStyles,
                    backgroundColor: "rgba(255, 255, 255, 0.05)",
                  }}
                >
                  <div>
                    <div style={{ color: "white" }}>Box Shadow</div>
                    <div
                      style={{
                        color: "rgba(255, 255, 255, 0.6)",
                        fontSize: "0.875rem",
                      }}
                    >
                      Add shadow to container
                    </div>
                  </div>
                  <label style={toggleSwitchContainerStyles}>
                    <div style={toggleSwitchStyles(displaySettings.boxShadow)}>
                      <div
                        style={toggleSwitchKnobStyles(
                          displaySettings.boxShadow,
                        )}
                      ></div>
                    </div>
                    <input
                      type="checkbox"
                      style={{
                        position: "absolute",
                        width: 1,
                        height: 1,
                        padding: 0,
                        margin: -1,
                        overflow: "hidden",
                        clip: "rect(0, 0, 0, 0)",
                        whiteSpace: "nowrap",
                        borderWidth: 0,
                      }}
                      checked={displaySettings.boxShadow}
                      onChange={() => handleToggleSetting("boxShadow")}
                    />
                  </label>
                </div>

                <div
                  style={{
                    ...settingsOptionStyles,
                    backgroundColor: "rgba(255, 255, 255, 0.05)",
                  }}
                >
                  <div>
                    <div style={{ color: "white" }}>Decorative Elements</div>
                    <div
                      style={{
                        color: "rgba(255, 255, 255, 0.6)",
                        fontSize: "0.875rem",
                      }}
                    >
                      Add gradient line and blurred orbs
                    </div>
                  </div>
                  <label style={toggleSwitchContainerStyles}>
                    <div
                      style={toggleSwitchStyles(
                        displaySettings.decorativeElements,
                      )}
                    >
                      <div
                        style={toggleSwitchKnobStyles(
                          displaySettings.decorativeElements,
                        )}
                      ></div>
                    </div>
                    <input
                      type="checkbox"
                      style={{
                        position: "absolute",
                        width: 1,
                        height: 1,
                        padding: 0,
                        margin: -1,
                        overflow: "hidden",
                        clip: "rect(0, 0, 0, 0)",
                        whiteSpace: "nowrap",
                        borderWidth: 0,
                      }}
                      checked={displaySettings.decorativeElements}
                      onChange={() => handleToggleSetting("decorativeElements")}
                    />
                  </label>
                </div>
              </div>
            </div>

            <div style={settingsSectionStyles}>
              <h3 style={{ ...settingsHeadingStyles, color: "white" }}>
                <Type
                  size={18}
                  style={{ marginRight: "0.5rem", color: "#C084FC" }}
                />{" "}
                Content
              </h3>

              <div
                style={{
                  display: "flex",
                  flexDirection: "column",
                  gap: "0.75rem",
                }}
              >
                <div
                  style={{
                    ...settingsOptionStyles,
                    backgroundColor: "rgba(255, 255, 255, 0.05)",
                  }}
                >
                  <div>
                    <div style={{ color: "white" }}>Show Name</div>
                    <div
                      style={{
                        color: "rgba(255, 255, 255, 0.6)",
                        fontSize: "0.875rem",
                      }}
                    >
                      Display person's name
                    </div>
                  </div>
                  <label style={toggleSwitchContainerStyles}>
                    <div style={toggleSwitchStyles(displaySettings.showName)}>
                      <div
                        style={toggleSwitchKnobStyles(displaySettings.showName)}
                      ></div>
                    </div>
                    <input
                      type="checkbox"
                      style={{
                        position: "absolute",
                        width: 1,
                        height: 1,
                        padding: 0,
                        margin: -1,
                        overflow: "hidden",
                        clip: "rect(0, 0, 0, 0)",
                        whiteSpace: "nowrap",
                        borderWidth: 0,
                      }}
                      checked={displaySettings.showName}
                      onChange={() => handleToggleSetting("showName")}
                    />
                  </label>
                </div>

                <div
                  style={{
                    ...settingsOptionStyles,
                    backgroundColor: "rgba(255, 255, 255, 0.05)",
                  }}
                >
                  <div>
                    <div style={{ color: "white" }}>Show Titles</div>
                    <div
                      style={{
                        color: "rgba(255, 255, 255, 0.6)",
                        fontSize: "0.875rem",
                      }}
                    >
                      Display person's title or role
                    </div>
                  </div>
                  <label style={toggleSwitchContainerStyles}>
                    <div style={toggleSwitchStyles(displaySettings.showTitles)}>
                      <div
                        style={toggleSwitchKnobStyles(
                          displaySettings.showTitles,
                        )}
                      ></div>
                    </div>
                    <input
                      type="checkbox"
                      style={{
                        position: "absolute",
                        width: 1,
                        height: 1,
                        padding: 0,
                        margin: -1,
                        overflow: "hidden",
                        clip: "rect(0, 0, 0, 0)",
                        whiteSpace: "nowrap",
                        borderWidth: 0,
                      }}
                      checked={displaySettings.showTitles}
                      onChange={() => handleToggleSetting("showTitles")}
                    />
                  </label>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Preview Tab Content */}
        {currentTab === "preview" && (
          <div
            style={{ display: "flex", flexDirection: "column", gap: "1rem" }}
          >
            <div style={settingsSectionStyles}>
              <h3 style={{ ...settingsHeadingStyles, color: "white" }}>
                <Monitor
                  size={18}
                  style={{ marginRight: "0.5rem", color: "#C084FC" }}
                />{" "}
                Preview Control
              </h3>

              <div
                style={{
                  display: "flex",
                  flexDirection: "column",
                  gap: "1rem",
                }}
              >
                <button
                  onClick={handleDisplayToggle}
                  style={{
                    width: "100%",
                    padding: "0.75rem 1rem",
                    borderRadius: "0.5rem",
                    fontWeight: "500",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    transition: "all 0.2s",
                    background: isDisplayActive
                      ? "linear-gradient(to right, #DC2626, #991B1B)"
                      : "linear-gradient(to right, #111827, rgba(0, 0, 0, 0.5))",
                    boxShadow: isDisplayActive
                      ? "0 10px 15px -3px rgba(220, 38, 38, 0.3)"
                      : "0 10px 15px -3px rgba(126, 34, 206, 0.2)",
                    color: "white",
                    border: "none",
                    cursor: "pointer",
                  }}
                >
                  <Monitor size={18} style={{ marginRight: "0.5rem" }} />
                  {isDisplayActive ? "Hide Preview" : "Show Preview"}
                </button>

                {livePerson ? (
                  <div
                    style={{
                      backgroundColor: "rgba(20, 83, 45, 0.2)",
                      border: "1px solid rgba(34, 197, 94, 0.3)",
                      borderRadius: "0.5rem",
                      padding: "0.75rem",
                    }}
                  >
                    <div
                      style={{
                        display: "flex",
                        alignItems: "center",
                        marginBottom: "0.5rem",
                      }}
                    >
                      <div
                        style={{
                          width: "0.5rem",
                          height: "0.5rem",
                          borderRadius: "9999px",
                          backgroundColor: "#22C55E",
                          marginRight: "0.5rem",
                          animation:
                            "pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite",
                        }}
                      ></div>
                      <span style={{ fontWeight: "500" }}>Now Streaming:</span>
                    </div>
                    <div
                      style={{
                        paddingLeft: "1rem",
                        borderLeft: "2px solid rgba(34, 197, 94, 0.3)",
                      }}
                    >
                      <div style={{ fontWeight: "500" }}>
                        {livePerson.name} {livePerson.surname}
                      </div>
                      {livePerson.title && (
                        <div
                          style={{
                            fontSize: "0.875rem",
                            color: "rgba(255, 255, 255, 0.7)",
                            fontStyle: "italic",
                          }}
                        >
                          {livePerson.title}
                        </div>
                      )}
                    </div>
                  </div>
                ) : (
                  <div
                    style={{
                      backgroundColor: "rgba(31, 41, 55, 0.5)",
                      border: "1px solid rgba(255, 255, 255, 0.1)",
                      borderRadius: "0.5rem",
                      padding: "0.75rem",
                      textAlign: "center",
                      color: "rgba(255, 255, 255, 0.6)",
                    }}
                  >
                    No one is currently being streamed.
                    <div
                      style={{
                        marginTop: "0.25rem",
                        fontSize: "0.875rem",
                      }}
                    >
                      Select a person and click "Go Live" to start.
                    </div>
                  </div>
                )}
              </div>
            </div>

            <div style={settingsSectionStyles}>
              <h3 style={{ ...settingsHeadingStyles, color: "white" }}>
                <ExternalLink
                  size={18}
                  style={{ marginRight: "0.5rem", color: "#C084FC" }}
                />{" "}
                OBS Setup
              </h3>

              <div style={{ marginBottom: "1rem" }}>
                <label
                  style={{
                    display: "block",
                    marginBottom: "0.5rem",
                    fontSize: "0.875rem",
                    color: "rgba(255, 255, 255, 0.8)",
                  }}
                >
                  Display URL (add as browser source in OBS)
                </label>
                <div style={{ display: "flex" }}>
                  <input
                    type="text"
                    style={{
                      flex: 1,
                      padding: "0.5rem",
                      borderTopLeftRadius: "0.5rem",
                      borderBottomLeftRadius: "0.5rem",
                      backgroundColor: "#1F2937",
                      color: "white",
                      border: "1px solid rgba(255, 255, 255, 0.2)",
                      outline: "none",
                    }}
                    value={getLiveDisplayUrl()}
                    readOnly
                  />
                  <button
                    onClick={handleCopyDisplayUrl}
                    style={{
                      padding: "0.5rem",
                      background: "linear-gradient(to right, #2563EB, #1E40AF)",
                      color: "white",
                      border: "none",
                      display: "flex",
                      alignItems: "center",
                      transition: "background-color 0.2s",
                      cursor: "pointer",
                    }}
                  >
                    <Copy size={16} style={{ marginRight: "0.25rem" }} /> Copy
                  </button>
                  <button
                    onClick={handleOpenDisplayWindow}
                    style={{
                      padding: "0.5rem",
                      background: "linear-gradient(to right, #16A34A, #166534)",
                      color: "white",
                      border: "none",
                      borderTopRightRadius: "0.5rem",
                      borderBottomRightRadius: "0.5rem",
                      display: "flex",
                      alignItems: "center",
                      transition: "background-color 0.2s",
                      cursor: "pointer",
                    }}
                  >
                    <ExternalLink
                      size={16}
                      style={{ marginRight: "0.25rem" }}
                    />{" "}
                    Open
                  </button>
                </div>
              </div>

              <div
                style={{
                  fontSize: "0.875rem",
                  color: "rgba(255, 255, 255, 0.8)",
                }}
              >
                <p style={{ marginBottom: "0.5rem" }}>
                  Quick Setup Instructions:
                </p>
                <ol
                  style={{
                    listStyleType: "decimal",
                    paddingLeft: "1.25rem",
                    display: "flex",
                    flexDirection: "column",
                    gap: "0.25rem",
                  }}
                >
                  <li>In OBS Studio, add a "Browser" source to your scene</li>
                  <li>Paste the Display URL above as the URL</li>
                  <li>
                    Set width to {displaySettings.displayWidth || 800} and
                    height to {displaySettings.displayHeight || 200}
                  </li>
                  <li>Check "Refresh browser when scene becomes active"</li>
                  <li>Position the source where names should appear</li>
                </ol>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Center content - Preview */}
      <div style={centerContentStyles}>
        <h1 style={titleStyles}>Name Display Control</h1>

        {/* Preview Display */}
        <div style={previewContainerStyles}>
          <div style={previewHeaderStyles}>
            <span>Preview</span>
            {selectedPerson && (
              <div
                style={{
                  display: "flex",
                  alignItems: "center",
                  fontSize: "0.875rem",
                  color:
                    selectedPerson.id === livePerson?.id
                      ? "#4ADE80"
                      : "#60A5FA",
                }}
              >
                <div
                  style={{
                    width: "0.5rem",
                    height: "0.5rem",
                    borderRadius: "9999px",
                    backgroundColor:
                      selectedPerson.id === livePerson?.id
                        ? "#22C55E"
                        : "#3B82F6",
                    marginRight: "0.5rem",
                    animation:
                      selectedPerson.id === livePerson?.id
                        ? "pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite"
                        : "none",
                  }}
                ></div>
                {selectedPerson.id === livePerson?.id ? "Live" : "Selected"}
              </div>
            )}
          </div>

          <div style={previewContentStyles}>
            <div style={previewAreaStyles}>
              {/* Main preview component */}
              {selectedPerson ? (
                <DisplayOnly
                  person={selectedPerson}
                  settings={displaySettings}
                />
              ) : (
                <div
                  style={{
                    textAlign: "center",
                    color: "rgba(255, 255, 255, 0.5)",
                  }}
                >
                  <div
                    style={{
                      marginBottom: "0.5rem",
                      fontSize: "1.125rem",
                    }}
                  >
                    No person selected
                  </div>
                  <div style={{ fontSize: "0.875rem" }}>
                    Click on a person card to select them
                  </div>
                </div>
              )}
            </div>

            {/* Go Live button */}
            {selectedPerson && (
              <div
                style={{
                  marginTop: "1rem",
                  display: "flex",
                  justifyContent: "center",
                }}
              >
                <button
                  onClick={handleGoLive}
                  style={{
                    padding: "0.75rem 1.5rem",
                    borderRadius: "0.5rem",
                    backgroundColor:
                      selectedPerson.id === livePerson?.id
                        ? "rgba(34, 197, 94, 0.2)"
                        : "#166534",
                    color: "white",
                    border:
                      selectedPerson.id === livePerson?.id
                        ? "1px solid #16A34A"
                        : "none",
                    display: "flex",
                    alignItems: "center",
                    gap: "0.5rem",
                    fontWeight: "500",
                    cursor: "pointer",
                  }}
                >
                  <Play size={18} />
                  {selectedPerson.id === livePerson?.id
                    ? "Currently Live"
                    : "Go Live with Selection"}
                </button>
              </div>
            )}
          </div>

          {/* Quick settings under preview */}
          <div style={quickSettingsContainerStyles}>
            <h3
              style={{
                fontSize: "1.125rem",
                fontWeight: "500",
                marginBottom: "0.75rem",
              }}
            >
              Quick Settings
            </h3>

            <div
              style={{
                display: "grid",
                gridTemplateColumns: "repeat(2, minmax(0, 1fr))",
                gap: "1rem",
              }}
            >
              <div
                style={{
                  display: "flex",
                  alignItems: "center",
                  gap: "0.5rem",
                }}
              >
                <label style={toggleSwitchContainerStyles}>
                  <div
                    style={{
                      width: "2.5rem",
                      height: "1.25rem",
                      backgroundColor: displaySettings.showName
                        ? "rgba(37, 99, 235, 0.8)"
                        : "rgba(55, 65, 81, 0.5)",
                      borderRadius: "9999px",
                      position: "relative",
                      transition: "background-color 0.2s",
                    }}
                  >
                    <div
                      style={{
                        position: "absolute",
                        top: "2px",
                        left: displaySettings.showName
                          ? "calc(100% - 1rem - 2px)"
                          : "2px",
                        backgroundColor: "white",
                        border: "1px solid rgba(0, 0, 0, 0.1)",
                        borderRadius: "9999px",
                        height: "1rem",
                        width: "1rem",
                        transition: "all 0.2s",
                      }}
                    ></div>
                  </div>
                  <input
                    type="checkbox"
                    style={{
                      position: "absolute",
                      width: 1,
                      height: 1,
                      padding: 0,
                      margin: -1,
                      overflow: "hidden",
                      clip: "rect(0, 0, 0, 0)",
                      whiteSpace: "nowrap",
                      borderWidth: 0,
                    }}
                    checked={displaySettings.showName}
                    onChange={() => handleToggleSetting("showName")}
                  />
                </label>
                <span style={{ fontSize: "0.875rem" }}>Show Name</span>
              </div>

              <div
                style={{
                  display: "flex",
                  alignItems: "center",
                  gap: "0.5rem",
                }}
              >
                <label style={toggleSwitchContainerStyles}>
                  <div
                    style={{
                      width: "2.5rem",
                      height: "1.25rem",
                      backgroundColor: displaySettings.showTitles
                        ? "rgba(37, 99, 235, 0.8)"
                        : "rgba(55, 65, 81, 0.5)",
                      borderRadius: "9999px",
                      position: "relative",
                      transition: "background-color 0.2s",
                    }}
                  >
                    <div
                      style={{
                        position: "absolute",
                        top: "2px",
                        left: displaySettings.showTitles
                          ? "calc(100% - 1rem - 2px)"
                          : "2px",
                        backgroundColor: "white",
                        border: "1px solid rgba(0, 0, 0, 0.1)",
                        borderRadius: "9999px",
                        height: "1rem",
                        width: "1rem",
                        transition: "all 0.2s",
                      }}
                    ></div>
                  </div>
                  <input
                    type="checkbox"
                    style={{
                      position: "absolute",
                      width: 1,
                      height: 1,
                      padding: 0,
                      margin: -1,
                      overflow: "hidden",
                      clip: "rect(0, 0, 0, 0)",
                      whiteSpace: "nowrap",
                      borderWidth: 0,
                    }}
                    checked={displaySettings.showTitles}
                    onChange={() => handleToggleSetting("showTitles")}
                  />
                </label>
                <span style={{ fontSize: "0.875rem" }}>Show Title</span>
              </div>

              <div
                style={{
                  display: "flex",
                  alignItems: "center",
                  gap: "0.5rem",
                }}
              >
                <label style={toggleSwitchContainerStyles}>
                  <div
                    style={{
                      width: "2.5rem",
                      height: "1.25rem",
                      backgroundColor: displaySettings.textShadow
                        ? "rgba(37, 99, 235, 0.8)"
                        : "rgba(55, 65, 81, 0.5)",
                      borderRadius: "9999px",
                      position: "relative",
                      transition: "background-color 0.2s",
                    }}
                  >
                    <div
                      style={{
                        position: "absolute",
                        top: "2px",
                        left: displaySettings.textShadow
                          ? "calc(100% - 1rem - 2px)"
                          : "2px",
                        backgroundColor: "white",
                        border: "1px solid rgba(0, 0, 0, 0.1)",
                        borderRadius: "9999px",
                        height: "1rem",
                        width: "1rem",
                        transition: "all 0.2s",
                      }}
                    ></div>
                  </div>
                  <input
                    type="checkbox"
                    style={{
                      position: "absolute",
                      width: 1,
                      height: 1,
                      padding: 0,
                      margin: -1,
                      overflow: "hidden",
                      clip: "rect(0, 0, 0, 0)",
                      whiteSpace: "nowrap",
                      borderWidth: 0,
                    }}
                    checked={displaySettings.textShadow}
                    onChange={() => handleToggleSetting("textShadow")}
                  />
                </label>
                <span style={{ fontSize: "0.875rem" }}>Text Shadow</span>
              </div>

              <div
                style={{
                  display: "flex",
                  alignItems: "center",
                  gap: "0.5rem",
                }}
              >
                <label style={toggleSwitchContainerStyles}>
                  <div
                    style={{
                      width: "2.5rem",
                      height: "1.25rem",
                      backgroundColor: displaySettings.decorativeElements
                        ? "rgba(37, 99, 235, 0.8)"
                        : "rgba(55, 65, 81, 0.5)",
                      borderRadius: "9999px",
                      position: "relative",
                      transition: "background-color 0.2s",
                    }}
                  >
                    <div
                      style={{
                        position: "absolute",
                        top: "2px",
                        left: displaySettings.decorativeElements
                          ? "calc(100% - 1rem - 2px)"
                          : "2px",
                        backgroundColor: "white",
                        border: "1px solid rgba(0, 0, 0, 0.1)",
                        borderRadius: "9999px",
                        height: "1rem",
                        width: "1rem",
                        transition: "all 0.2s",
                      }}
                    ></div>
                  </div>
                  <input
                    type="checkbox"
                    style={{
                      position: "absolute",
                      width: 1,
                      height: 1,
                      padding: 0,
                      margin: -1,
                      overflow: "hidden",
                      clip: "rect(0, 0, 0, 0)",
                      whiteSpace: "nowrap",
                      borderWidth: 0,
                    }}
                    checked={displaySettings.decorativeElements}
                    onChange={() => handleToggleSetting("decorativeElements")}
                  />
                </label>
                <span style={{ fontSize: "0.875rem" }}>Decorations</span>
              </div>
            </div>
          </div>

          {/* Live View Section */}
          {livePerson && (
            <div
              style={{
                marginTop: "1.5rem",
                border: "1px solid rgba(34, 197, 94, 0.5)",
                borderRadius: "0.5rem",
                overflow: "hidden",
              }}
            >
              <div
                style={{
                  background: "linear-gradient(to right, #065f46, #064e3b)",
                  color: "white",
                  padding: "0.75rem 1.5rem",
                  fontSize: "1.125rem",
                  fontWeight: "500",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "space-between",
                }}
              >
                <div style={{ display: "flex", alignItems: "center" }}>
                  <div
                    style={{
                      width: "0.5rem",
                      height: "0.5rem",
                      borderRadius: "50%",
                      backgroundColor: "#22c55e",
                      marginRight: "0.5rem",
                      animation:
                        "pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite",
                    }}
                  ></div>
                  <span>Live View</span>
                </div>
                <span style={{ fontSize: "0.875rem", fontWeight: "normal" }}>
                  This is what viewers see
                </span>
              </div>

              <div
                style={{
                  backgroundColor: "rgba(6, 78, 59, 0.1)",
                  padding: "1.5rem",
                }}
              >
                <DisplayOnly person={livePerson} settings={liveSettings} />
              </div>
            </div>
          )}

          {/* Display style presets */}
          <div style={stylePresetsContainerStyles}>
            <h3
              style={{
                fontSize: "1.125rem",
                fontWeight: "500",
                marginBottom: "0.75rem",
              }}
            >
              Style Presets
            </h3>
            <div
              style={{
                display: "grid",
                gridTemplateColumns: "repeat(3, minmax(0, 1fr))",
                gap: "0.75rem",
              }}
            >
              <button
                style={stylePresetButtonStyles("gradient")}
                onClick={() => applyStylePreset("gradient")}
              >
                <div
                  style={{
                    fontSize: "0.875rem",
                    fontWeight: "500",
                    marginBottom: "0.25rem",
                  }}
                >
                  Gradient
                </div>
                <div
                  style={{
                    fontSize: "0.75rem",
                    color: "rgba(255, 255, 255, 0.6)",
                  }}
                >
                  Classic style
                </div>
              </button>

              <button
                style={stylePresetButtonStyles("minimal")}
                onClick={() => applyStylePreset("minimal")}
              >
                <div
                  style={{
                    fontSize: "0.875rem",
                    fontWeight: "500",
                    marginBottom: "0.25rem",
                  }}
                >
                  Minimal
                </div>
                <div
                  style={{
                    fontSize: "0.75rem",
                    color: "rgba(255, 255, 255, 0.6)",
                  }}
                >
                  Clean look
                </div>
              </button>

              <button
                style={stylePresetButtonStyles("accented")}
                onClick={() => applyStylePreset("accented")}
              >
                <div
                  style={{
                    fontSize: "0.875rem",
                    fontWeight: "500",
                    marginBottom: "0.25rem",
                  }}
                >
                  Accented
                </div>
                <div
                  style={{
                    fontSize: "0.75rem",
                    color: "rgba(255, 255, 255, 0.6)",
                  }}
                >
                  With color highlight
                </div>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Display simulation */}
      {isDisplayActive && (
        <div style={fixedPreviewStyles}>
          {selectedPerson ? (
            <DisplayOnly person={selectedPerson} settings={displaySettings} />
          ) : (
            <div
              style={{
                textAlign: "center",
                color: "rgba(255, 255, 255, 0.7)",
                padding: "1rem",
              }}
            >
              <div style={{ marginBottom: "0.5rem" }}>No person selected</div>
              <div style={{ fontSize: "0.875rem" }}>
                Select a person to preview them
              </div>
            </div>
          )}
          <button
            onClick={handleDisplayToggle}
            style={{
              marginTop: "0.5rem",
              padding: "0.5rem",
              backgroundColor: "#DC2626",
              color: "white",
              fontSize: "0.875rem",
              borderRadius: "0.375rem",
              width: "100%",
              transition: "background-color 0.2s",
              border: "none",
              cursor: "pointer",
            }}
          >
            Close Preview
          </button>
        </div>
      )}

      {/* Tutorial Modal */}
      {showTutorial && (
        <div style={modalOverlayStyles}>
          <div style={modalContainerStyles}>
            <div style={modalHeaderStyles}>
              <h2 style={{ fontSize: "1.25rem", fontWeight: "bold" }}>
                How to Use the Name Display Tool
              </h2>
              <button
                onClick={() => setShowTutorial(false)}
                style={buttonStyles.icon}
              >
                <X size={24} />
              </button>
            </div>

            <div
              style={{ display: "flex", flexDirection: "column", gap: "1rem" }}
            >
              <div
                style={{
                  display: "flex",
                  flexDirection: "column",
                  gap: "0.5rem",
                }}
              >
                <h3
                  style={{
                    fontSize: "1.125rem",
                    fontWeight: "500",
                    display: "flex",
                    alignItems: "center",
                  }}
                >
                  <ChevronRight
                    size={18}
                    style={{ marginRight: "0.5rem", color: "#60A5FA" }}
                  />{" "}
                  Adding People
                </h3>
                <p
                  style={{
                    color: "rgba(255, 255, 255, 0.8)",
                    paddingLeft: "1.5rem",
                  }}
                >
                  Add individuals manually by filling out the form at the bottom
                  of the People tab, or import multiple people from an Excel
                  spreadsheet using drag and drop.
                </p>
              </div>

              <div
                style={{
                  display: "flex",
                  flexDirection: "column",
                  gap: "0.5rem",
                }}
              >
                <h3
                  style={{
                    fontSize: "1.125rem",
                    fontWeight: "500",
                    display: "flex",
                    alignItems: "center",
                  }}
                >
                  <ChevronRight
                    size={18}
                    style={{ marginRight: "0.5rem", color: "#60A5FA" }}
                  />{" "}
                  Selecting and Displaying People
                </h3>
                <p
                  style={{
                    color: "rgba(255, 255, 255, 0.8)",
                    paddingLeft: "1.5rem",
                  }}
                >
                  Click on a person's card to select them for preview. Once
                  selected, click the{" "}
                  <span style={{ color: "#4ADE80", fontWeight: "500" }}>
                    Go Live
                  </span>{" "}
                  button to stream their information. Changes to settings are
                  visible in preview but won't affect the live display until you
                  go live again.
                </p>
              </div>

              <div
                style={{
                  display: "flex",
                  flexDirection: "column",
                  gap: "0.5rem",
                }}
              >
                <h3
                  style={{
                    fontSize: "1.125rem",
                    fontWeight: "500",
                    display: "flex",
                    alignItems: "center",
                  }}
                >
                  <ChevronRight
                    size={18}
                    style={{ marginRight: "0.5rem", color: "#60A5FA" }}
                  />{" "}
                  Customizing Display
                </h3>
                <p
                  style={{
                    color: "rgba(255, 255, 255, 0.8)",
                    paddingLeft: "1.5rem",
                  }}
                >
                  Use the Style tab to customize how names will appear. Adjust
                  size, fonts, backgrounds, and effects for optimal visibility.
                </p>
              </div>

              <div
                style={{
                  display: "flex",
                  flexDirection: "column",
                  gap: "0.5rem",
                }}
              >
                <h3
                  style={{
                    fontSize: "1.125rem",
                    fontWeight: "500",
                    display: "flex",
                    alignItems: "center",
                  }}
                >
                  <ChevronRight
                    size={18}
                    style={{ marginRight: "0.5rem", color: "#60A5FA" }}
                  />{" "}
                  OBS Integration
                </h3>
                <p
                  style={{
                    color: "rgba(255, 255, 255, 0.8)",
                    paddingLeft: "1.5rem",
                  }}
                >
                  Add the display URL as a Browser Source in OBS. The display
                  will update automatically when you stream different people.
                  Remember to set the browser source to refresh when the scene
                  becomes active.
                </p>
              </div>
            </div>

            <div
              style={{
                marginTop: "1.5rem",
                display: "flex",
                justifyContent: "flex-end",
              }}
            >
              <button
                onClick={() => setShowTutorial(false)}
                style={{
                  padding: "0.5rem 1rem",
                  background: "linear-gradient(to right, #2563EB, #7C3AED)",
                  color: "white",
                  borderRadius: "0.5rem",
                  transition: "background-color 0.2s",
                  border: "none",
                  cursor: "pointer",
                }}
              >
                Got it
              </button>
            </div>
          </div>
        </div>
      )}

      {/* CSS keyframes for animations */}
      <style
        dangerouslySetInnerHTML={{
          __html: `
                            @keyframes pulse {
                              0%, 100% { opacity: 1; }
                              50% { opacity: 0.5; }
                            }

                            @keyframes fadeIn {
                              0% { opacity: 0; }
                              100% { opacity: 1; }
                            }

                            @keyframes bounce {
                              0%, 100% {
                                transform: translateY(-25%);
                                animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
                              }
                              50% {
                                transform: translateY(0);
                                animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
                              }
                            }
                          `,
        }}
      />
    </div>
  );
};

export default StreamingApp;
